'use client';
import { useEffect, useRef, useState } from 'react';

export default function CreateTest() {
  const [pages, setPages] = useState([{ questions: [{ type: 'multiple-choice', level: 'normal' }] }]);
  const [activeFilter, setActiveFilter] = useState(null);
  const [testCategory, setTestCategory] = useState('CPNS');
  const [questionType, setQuestionType] = useState('multiple-choice');
  const [questionLevel, setQuestionLevel] = useState('normal');
  const [activePage, setActivePage] = useState('create-test');
  const [showModal, setShowModal] = useState(false);
  const [modalType, setModalType] = useState(null);
  const [pageIndexToRemove, setPageIndexToRemove] = useState(null);
  const [questionIndexToRemove, setQuestionIndexToRemove] = useState(null);
  const [activePageIndex, setActivePageIndex] = useState(0);
  const dropdownRef = useRef(null);

  const categories = {
    CPNS: ['pilihan ganda', 'essay', 'psikotes'],
    UTBK: ['pilihan ganda', 'essay'],
    Psikotes: ['multiple-choice', 'psikotes']
  };

  const levels = ['normal', 'medium', 'high'];

  const addPage = () => {
    setPages([...pages, { questions: [{ type: 'multiple-choice', level: 'normal' }] }]);
  };

  const addQuestion = (pageIndex) => {
    const newPages = [...pages];
    newPages[pageIndex].questions.push({ type: 'multiple-choice', level: 'normal' });
    setPages(newPages);
  };

  const updateQuestionType = (pageIndex, questionIndex, type) => {
    const newPages = [...pages];
    newPages[pageIndex].questions[questionIndex].type = type;
    setPages(newPages);
  };

  const updateQuestionLevel = (pageIndex, questionIndex, level) => {
    const newPages = [...pages];
    newPages[pageIndex].questions[questionIndex].level = level;
    setPages(newPages);
  };

  const handleRemoveQuestion = (pageIndex, questionIndex) => {
    setPageIndexToRemove(pageIndex);
    setQuestionIndexToRemove(questionIndex);
    setModalType('question');
    setShowModal(true);
  };

  const handleRemovePage = (pageIndex) => {
    setPageIndexToRemove(pageIndex);
    setModalType('page');
    setShowModal(true);
  };

  const confirmRemove = () => {
    if (modalType === 'question') {
      const newPages = [...pages];
      newPages[pageIndexToRemove].questions.splice(questionIndexToRemove, 1);
      setPages(newPages);
    } else if (modalType === 'page') {
      const newPages = pages.filter((_, index) => index !== pageIndexToRemove);
      setPages(newPages);
    }
    setShowModal(false);
  };

  const cancelRemove = () => {
    setShowModal(false);
  };

  useEffect(() => {
    const handleClickOutside = (event) => {
      if (dropdownRef.current && !dropdownRef.current.contains(event.target)) {
        setActiveFilter(null);
      }
    };

    document.addEventListener('mousedown', handleClickOutside);
    return () => {
      document.removeEventListener('mousedown', handleClickOutside);
    };
  }, []);

  const renderContent = () => {
    switch (activePage) {
      case 'create-test':
        return (
          <div className="bg-white p-4 shadow-md rounded-md">
            {pages.map((page, pageIndex) => (
              <div key={pageIndex} className="mb-6">
                <div className="flex items-center justify-between mb-4 border-b border-gray-300 pb-2">
                  <h3 className="text-xl font-semibold">Page {pageIndex + 1}</h3>
                  <button
                    className="text-red-500 text-xl"
                    onClick={() => handleRemovePage(pageIndex)}
                  >
                    ×
                  </button>
                </div>

                {/* Combined Filter Bar */}
                <div className="flex gap-4 mb-4" ref={dropdownRef}>
                  {/* Add Question Button */}
                  <button
                    className="border border-gray-300 rounded-md px-4 py-2 flex items-center justify-between w-48"
                    onClick={() => addQuestion(pageIndex)}
                  >
                    Tambah Soal
                  </button>

                  {/* Category Dropdown */}
                  <div className="relative w-48">
                    <button
                      className="border border-gray-300 rounded-md px-4 py-2 flex items-center justify-between w-full"
                      onClick={() => setActiveFilter(activeFilter === 'category' ? null : 'category')}
                    >
                      Kategori Tes
                      <span className={ml-2 transform ${activeFilter === 'category' ? 'rotate-180' : ''}}>&#9660;</span>
                    </button>
                    {activeFilter === 'category' && (
                      <div className="absolute top-full left-0 w-full bg-white border border-gray-300 rounded-md mt-2 shadow-lg z-10">
                        {Object.keys(categories).map(category => (
                          <button
                            key={category}
                            className="w-full text-left px-4 py-2 hover:bg-gray-200"
                            onClick={() => {
                              setTestCategory(category);
                              setQuestionType(categories[category][0]);
                              setActiveFilter(null);
                            }}
                          >
                            {category}
                          </button>
                        ))}
                      </div>
                    )}
                  </div>

                  {/* Type Dropdown */}
                  <div className="relative w-48">
                    <button
                      className="border border-gray-300 rounded-md px-4 py-2 flex items-center justify-between w-full"
                      onClick={() => setActiveFilter(activeFilter === 'type' ? null : 'type')}
                    >
                      Jenis Tes
                      <span className={ml-2 transform ${activeFilter === 'type' ? 'rotate-180' : ''}}>&#9660;</span>
                    </button>
                    {activeFilter === 'type' && (
                      <div className="absolute top-full left-0 w-full bg-white border border-gray-300 rounded-md mt-2 shadow-lg z-10">
                        {categories[testCategory].map(type => (
                          <button
                            key={type}
                            className="w-full text-left px-4 py-2 hover:bg-gray-200"
                            onClick={() => {
                              setQuestionType(type);
                              setActiveFilter(null);
                            }}
                          >
                            {type.charAt(0).toUpperCase() + type.slice(1)}
                          </button>
                        ))}
                      </div>
                    )}
                  </div>

                  {/* Level Dropdown */}
                  <div className="relative w-48">
                    <button
                      className="border border-gray-300 rounded-md px-4 py-2 flex items-center justify-between w-full"
                      onClick={() => setActiveFilter(activeFilter === 'level' ? null : 'level')}
                    >
                      Level
                      <span className={ml-2 transform ${activeFilter === 'level' ? 'rotate-180' : ''}}>&#9660;</span>
                    </button>
                    {activeFilter === 'level' && (
                      <div className="absolute top-full left-0 w-full bg-white border border-gray-300 rounded-md mt-2 shadow-lg z-10">
                        {levels.map(level => (
                          <button
                            key={level}
                            className="w-full text-left px-4 py-2 hover:bg-gray-200"
                            onClick={() => {
                              setQuestionLevel(level);
                              setActiveFilter(null);
                            }}
                          >
                            {level.charAt(0).toUpperCase() + level.slice(1)} Level
                          </button>
                        ))}
                      </div>
                    )}
                  </div>
                </div>

                {/* Questions */}
                <div className="mb-4">
                  <div className="flex gap-2">
                    {page.questions.map((_, questionIndex) => (
                      <div key={questionIndex} className="relative bg-blue-200 text-black border border-gray-300 rounded-md w-12 h-12 text-center flex items-center justify-center">
                        <span className="text-xl">{questionIndex + 1}</span>
                        <button
                          className="absolute top-0 right-0 text-red-500 text-xl p-1"
                          onClick={() => handleRemoveQuestion(pageIndex, questionIndex)}
                        >
                          ×
                        </button>
                      </div>
                    ))}
                  </div>
                </div>
              </div>
            ))}
            
            {/* Add Page Button */}
            <button
              className="bg-green-500 text-white px-4 py-2 rounded-md shadow-md hover:bg-green-600"
              onClick={addPage}
            >
              Tambah Page
            </button>
          </div>
        );
      case 'publish':
        return <div>Publish Content</div>;
      case 'analysis':
        return <div>Analysis Content</div>;
      default:
        return <div>Page Not Found</div>;
    }
  };

  return (
    <div className="p-6">
      {/* Header */}
      <header className="bg-[#06549D] p-4 shadow-md flex items-center">
        <button className="text-2xl font-bold text-white">☰</button>
        <h1 className="text-xl font-bold text-white ml-4">EtamTest</h1>
      </header>

      {/* Main Content */}
      <div className="mt-0">
        {/* Navigation Bar */}
        <nav className="bg-[#9CCEFC] shadow-md p-4 flex justify-around border-b border-gray-200">
          <button
            className={px-4 py-2 rounded-md ${activePage === 'create-test' ? 'bg-white text-black' : 'text-black'}}
            onClick={() => setActivePage('create-test')}
          >
            Buat Tes
          </button>
          <button
            className={px-4 py-2 rounded-md ${activePage === 'publish' ? 'bg-white text-black' : 'text-black'}}
            onClick={() => setActivePage('publish')}
          >
            Publis
          </button>
          <button
            className={px-4 py-2 rounded-md ${activePage === 'analysis' ? 'bg-white text-black' : 'text-black'}}
            onClick={() => setActivePage('analysis')}
          >
            Analisis
          </button>
        </nav>

        {/* Content */}
        {renderContent()}

        {/* Bottom Buttons */}
        {activePage === 'create-test' && (
          <div className="flex justify-end gap-4 mt-4">
            <button
              className="bg-blue-500 text-white px-4 py-2 rounded-md"
              onClick={() => alert('Simpan dan Publikasi')}
            >
              Simpan dan Publikasi
            </button>
          </div>
        )}

        {/* Modal */}
        {showModal && (
          <div className="fixed inset-0 flex items-center justify-center bg-gray-800 bg-opacity-50 z-50">
            <div className="bg-white p-6 rounded-md shadow-lg w-80">
              <h3 className="text-lg font-semibold mb-4">Konfirmasi Penghapusan</h3>
              <p>
                Apakah Anda yakin ingin {modalType === 'question' ? 'menghapus soal ini' : 'menghapus halaman ini'}?
              </p>
              <div className="flex justify-end gap-4 mt-4">
                <button
                  className="bg-red-500 text-white px-4 py-2 rounded-md"
                  onClick={confirmRemove}
                >
                  Hapus
                </button>
                <button
                  className="bg-gray-200 px-4 py-2 rounded-md"
                  onClick={cancelRemove}
                >
                  Batal
                </button>
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  );
}
